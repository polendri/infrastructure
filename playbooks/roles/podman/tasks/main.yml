---
- name: "Prepare system configuration"
  tags:
    - provision
  block:
    - import_tasks: "tasks/packages/Ubuntu/podman.yml"
    - name: "Install ACL package for using Ansible with unprivileged users"
      become: yes
      package:
        name: acl
        state: present
    - name: "Add user to subuid file"
      become: yes
      lineinfile:
        path: /etc/subuid
        regexp: "^{{user}}:.*"
        line: "{{user}}:100000:65536"
        create: yes
        mode: "644"
    - name: "Add user to subgid file"
      become: yes
      lineinfile:
        path: /etc/subgid
        regexp: "^{{user}}:.*"
        line: "{{user}}:100000:65536"
        create: yes
        mode: "644"
    - name: "Allow user to run systemd services at boot"
      become: yes
      # This command should work but it fails with "Could not enable linger: No such file or directory".
      # What follows does the same thing manually
      # command: "loginctl enable-linger {{user}}"
      block:
        - name: "Create /var/lib/systemd/linger directory"
          file:
            path: /var/lib/systemd/linger
            state: directory
        - name: "Create linger file for user '{{user}}'"
          file:
            path: "/var/lib/systemd/linger/{{user}}"
            state: touch
- name: "Stop and disable existing systemd service"
  tags:
    - deploy
  become: yes
  systemd:
    name: "{{service_name}}"
    enabled: no
    state: stopped
  register: stop_systemd_service
  # Allow for when the service doesn't exist (first run)
  failed_when: false
- name: "Create '{{pod_name}}' pod and containers"
  tags:
    - deploy
  become: yes
  # TODO re-enable when using rootless podman
  #become_user: "{{user}}"
  block:
    - name: "Check for existing pod"
      command: "podman pod exists {{pod_name}}"
      register: pod_exists
      changed_when: False
      failed_when: pod_exists.rc > 1
    - name: "Remove existing pod"
      command: "podman pod rm -f {{pod_name}}"
      when: pod_exists.rc == 0
    - name: "Create pod"
      command: "podman pod create --name {{pod_name}} --hostname {{pod_name}} {{pod_create_args}}"
    - name: "Create containers for pod"
      command: "podman create \
        --pod {{pod_name}} \
        --name {{item.name}} \
        {% if not (item.default_user | default(false) | bool) %}--user {{pod_uid}}:{{pod_gid}} {% endif %}\
        {{item.run_args | default('')}} \
        {{item.image}} \
        {{item.cmd_args | default('')}}"
      loop: "{{pod_containers}}"
    # TODO re-enable when using rootless podman
    # - name: "Set permissions on host-mounted directories"
    #   command: "podman unshare chown -R {{pod_uid}}:{{pod_gid}} {{item}}"
    #   when: "(host_mounts | length > 0)"
    #   loop: "{{host_mounts}}"
- name: "Update '{{pod_name}}' pod images"
  tags:
    - never
    - update
  become: yes
  # TODO re-enable when using rootless podman
  #become_user: "{{user}}"
  command: "podman pull {{item.image}}"
  notify: Restart service
  loop: "{{pod_containers}}"
- name: "Configure systemd services for '{{pod_name}}'"
  tags:
    - deploy
    - update
  block:
    - name: "Create systemd unit directory"
      file:
        path: "{{systemd_unit_dir}}"
        state: directory
    - name: "Generate systemd service units"
      become: yes
      # TODO re-enable when using rootless podman
      #become_user: "{{user}}"
      command:
        chdir: "/home/{{user}}"
        cmd: "podman generate systemd --files --name {{pod_name}}"
      changed_when: False
      register: generate_service_units
    # TODO re-enable when using rootless podman
    # - name: "Set service units to run as user"
    #   become: yes
    #   replace:
    #     path: "{{item}}"
    #     regexp: "^\\[Service\\]$"
    #     replace: "[Service]\nUser={{user}}\nGroup={{group}}"
    #   loop: "{{generate_service_units.stdout_lines}}"
    #   changed_when: False
    - name: "Copy service units to systemd unit directory"
      become: yes
      command: "cp {{item}} {{systemd_unit_dir}}"
      notify: Start service
      loop: "{{generate_service_units.stdout_lines}}"
      loop_control:
        index_var: index
    - name: "Reload systemd daemon"
      become: yes
      systemd:
        daemon_reload: yes
    - name: "Delete generated service unit files"
      become: yes
      file:
        path: "{{item}}"
        state: absent
      changed_when: False
      loop: "{{generate_service_units.stdout_lines}}"
- name: "Configure firewall for '{{pod_name}}' pod"
  tags:
    - deploy
  become: yes
  import_role:
    name: firewall
  vars:
    ports: "{{expose_ports}}"
- name: "Remove '{{pod_name}}' pod"
  tags:
    - never
    - withdraw
  block:
    - name: "Disable and stop {{pod_name}} service"
      service:
        name: "{{service_name}}"
        enabled: no
        state: stopped
    - name: "Reload systemd daemon"
      systemd:
        daemon_reload: yes
    # Used for getting a list of unit filenames to delete
    - name: "Generate systemd service units"
      become: yes
      # TODO re-enable when using rootless podman
      #become_user: "{{user}}"
      command:
        chdir: "/home/{{user}}"
        cmd: "podman generate systemd --files --name {{pod_name}}"
      changed_when: False
      register: delete_service_units
    - name: "Delete systemd service unit files"
      become: yes
      file:
        path: "{{systemd_unit_dir}}/{{item | basename}}"
        state: absent
      loop: "{{delete_service_units.stdout_lines}}"
    - name: "Delete generated systemd service units"
      become: yes
      file:
        path: "{{item}}"
        state: absent
      changed_when: False
      loop: "{{delete_service_units.stdout_lines}}"
    - name: "Remove '{{pod_name}}' pod"
      become: yes
      # TODO re-enable when using rootless podman
      #become_user: "{{user}}"
      command: "podman pod rm -f {{pod_name}}"
