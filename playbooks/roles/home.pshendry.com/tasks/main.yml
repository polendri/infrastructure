---
- name: "Configure system"
  tags:
    - provision
  become: yes
  block:
    - import_tasks: "tasks/reduce_privileged_ports.yml"
    - name: "Mount storage"
      block:
        - name: "Automount the internal HDD"
          mount:
            path: /data
            src: "/dev/disk/by-uuid/{{hdd1_uuid}}"
            fstype: ext4
            state: mounted
        - name: "Install NAS client"
          apt:
            name: nfs-common
        - name: "Create NAS mountpoint"
          file:
            path: /nas
            state: directory
            group: root
        - name: "Automount the NAS 'Documents' directory"
          mount:
            path: /nas/documents
            src: "{{nas_host}}:/Documents"
            fstype: nfs
            state: mounted
        - name: "Automount the NAS 'Media' directory"
          mount:
            path: /nas/media
            src: "{{nas_host}}:/Media"
            fstype: nfs
            state: mounted
    - name: "Create '{{service_user}}' user for running services"
      user:
        name: "{{service_user}}"
        group: "{{service_group}}"
    - name: "Allow Podman containers to access host"
      import_role:
        name: firewall
      vars:
        ports: "{{expose_ports}}"
    - name: "Configure Wireguard"
      block:
        - name: "Enable IPv4 forwarding"
          sysctl:
            name: net.ipv4.ip_forward
            value: "1"
        - name: "Open firewall port for Wireguard"
          import_role:
            name: firewall
          vars:
            ports:
              - "51820/udp"
        - name: "Install Wireguard"
          package:
            name:
              - openresolv
              - wireguard
            state: present
        - name: "Remove existing interfaces"
          block:
            - name: "Remove wg0 interface"
              systemd:
                name: "wg-quick@wg0"
                enabled: no
                state: stopped
              failed_when: false
            - name: "Remove wg1 interface"
              systemd:
                name: "net-wg1"
                enabled: no
                state: stopped
              failed_when: false
        - name: "Configure interfaces"
          block:
            - name: "Copy wg0 configuration file"
              template:
                src: "wireguard/wg0.conf"
                dest: "/etc/wireguard/"
                mode: "700"
            - name: "Copy wg1-up.sh script"
              template:
                src: "wireguard/wg1-up.sh"
                dest: "/usr/bin/"
                mode: "755"
            - name: "Copy wg1-down.sh script"
              copy:
                src: "wireguard/wg1-down.sh"
                dest: "/usr/bin/"
                mode: "755"
            - name: "Copy wg1 systemd unit"
              template:
                src: "wireguard/net-wg1.service"
                dest: "{{systemd_unit_dir}}"
                mode: "644"
        - name: "Start and enable systemd units"
          block:
            - name: "Reload systemd daemon"
              systemd:
                daemon_reload: yes
            - name: "Start and enable wg0 interface"
              systemd:
                name: "wg-quick@wg0"
                enabled: yes
                state: started
            - name: "Start and enable wg1 interface"
              systemd:
                name: "net-wg1"
                enabled: yes
                state: started
        # Makes it such that inbound packets aren't dropped if they come from an interface which isn't the normal
        # outbound route.
        - name: "Set loose IP filtering"
          sysctl:
            name: net.ipv4.conf.all.rp_filter
            value: "2"
        # TODO persist wireguard interfaces on reboot

- name: "Create service config and data directories"
  tags:
    - deploy
  become: yes
  file:
    path: "{{item}}"
    state: directory
    # TODO re-enable these ownerships when using rootless podman
    # owner: "{{service_user}}"
    # group: "{{service_group}}"
  loop:
    - "{{host_config_dir}}/nextcloud"
    - "{{host_data_dir}}/gitolite/git"
    - "{{host_data_dir}}/gitolite/keys"
    - "{{host_data_dir}}/nextcloud"
    - "{{host_data_dir}}/nextcloud-mariadb"
    - "{{host_data_dir}}/nextcloud-redis"
    - "{{host_data_dir}}/plex"
    - "{{host_data_dir}}/rproxy/certs"
    - "{{host_data_dir}}/rproxy/certs"
    - "{{host_data_dir}}/rproxy/logs"
    - "{{host_data_dir}}/unifi"
    # TODO use $XDG_RUNTIME_DIR instead of /run when using rootless podman
    - "/run/plex"
- name: "Copy service configuration data"
  tags:
    - deploy
  become: yes
  block:
    # - name: "Copy dyndns ddclient configuration"
    #   template:
    #     src: "ddclient/ddclient.conf"
    #     dest: "{{host_config_dir}}/ddclient/"
    #     # owner: "{{service_user}}"
    #     # group: "{{service_group}}"
    #     mode: "600"
    - name: "Copy rproxy Caddy configuration"
      copy:
        src: "rproxy/Caddyfile"
        dest: "{{host_config_dir}}/rproxy/"
        # owner: "{{service_user}}"
        # group: "{{service_group}}"
        mode: "600"
        validate: "podman run --rm -v %s:/etc/Caddyfile quay.io/indeliblesoftware/caddy -conf /etc/Caddyfile -validate"
- name: "Deploy services"
  block:
    # - name: "Create dyndns pod"
    #   import_role:
    #     name: podman
    #   vars:
    #     user: "{{service_user}}"
    #     group: "{{service_group}}"
    #     pod_name: dyndns
    #     pod_create_args: ""
    #     pod_uid: "1"
    #     pod_gid: "1"
    #     pod_containers:
    #       - name: ddclient
    #         image: docker.io/linuxserver/ddclient
    #         default_user: true
    #         run_args: "\
    #           --cap-drop all \
    #           --cap-add CHOWN \
    #           --cap-add SETUID \
    #           --cap-add SETGID \
    #           -e PUID=1 \
    #           -e PGID=1 \
    #           -e TZ=America/Toronto \
    #           -v {{host_config_dir}}/ddclient:/config:ro"
    #     host_mounts:
    #       - "{{host_config_dir}}/ddclient"
    - name: "Create gitolite pod"
      import_role:
        name: podman
      vars:
        user: "{{service_user}}"
        group: "{{service_group}}"
        pod_name: git
        pod_create_args: "-p 23:22"
        pod_uid: "1"
        pod_gid: "1"
        pod_containers:
          - name: gitolite
            image: docker.io/jgiannuzzi/gitolite
            default_user: true
            run_args: "\
              -v {{host_data_dir}}/gitolite/keys:/etc/ssh/keys \
              -v {{host_data_dir}}/gitolite/git:/var/lib/git"
        host_mounts:
          - "{{host_data_dir}}/gitolite/keys"
          - "{{host_data_dir}}/gitolite/git"
        expose_ports:
          - 23/tcp
    - name: "Create mediaserver pod"
      import_role:
        name: podman
      vars:
        user: "{{service_user}}"
        group: "{{service_group}}"
        pod_name: mediaserver
        pod_create_args: "\
          -p 3005/tcp \
          -p 8324/tcp \
          -p 32400/tcp \
          -p 32469/tcp \
          -p 1900/udp \
          -p 32410/udp \
          -p 32412/udp \
          -p 32413/udp \
          -p 32414/udp"
        pod_uid: "1"
        pod_gid: "1"
        pod_containers:
          - name: plex
            image: docker.io/plexinc/pms-docker
            default_user: true
            run_args: "\
              -e ADVERTISE_IP=http://home.ijj.li:32400/ \
              -e PLEX_UID=1 \
              -e PLEX_GID=1 \
              -e TZ=America/Toronto \
              -v {{host_data_dir}}/plex:/config \
              -v {{host_media_dir}}:/data \
              -v /run/plex:/transcode"
        host_mounts:
          - "{{host_data_dir}}/plex"
          - "/run/plex"
        expose_ports:
          - 3005/tcp
          - 8324/tcp
          - 32400/tcp
          - 32469/tcp
          - 1900/udp
          - 32410/udp
          - 32412/udp
          - 32413/udp
          - 32414/udp
    - name: "Create unifi pod"
      import_role:
        name: podman
      vars:
        user: "{{service_user}}"
        group: "{{service_group}}"
        pod_name: unifi
        pod_create_args: "\
          -p 3478/udp \
          -p 6789 \
          -p 8080 \
          -p 8443 \
          -p 8880 \
          -p 8843 \
          -p 10001/udp"
        pod_uid: "1"
        pod_gid: "1"
        pod_containers:
          - name: unifi-controller
            image: docker.io/jacobalberty/unifi
            default_user: true
            run_args: "\
              --cap-drop all \
              --cap-add CHOWN \
              --cap-add SETUID \
              --cap-add SETGID \
              -e BIND_PRIV=false \
              -e RUNAS_UID0=false \
              -e UNIFI_UID=1 \
              -e UNIFI_GID=1 \
              -e TZ=America/Toronto \
              -v {{host_data_dir}}/unifi:/unifi \
              --tmpfs /var/run/unifi"
        host_mounts:
          - "{{host_data_dir}}/unifi"
        expose_ports:
          - 3478/udp
          - 6789/tcp
          - 8080/tcp
          - 8443/tcp
          - 8880/tcp
          - 8843/tcp
          - 10001/udp
    - name: "Create web pod"
      import_role:
        name: podman
      vars:
        user: "{{service_user}}"
        group: "{{service_group}}"
        pod_name: web
        pod_create_args: -p 80:8080 -p 443:8443
        pod_uid: "1"
        pod_gid: "1"
        pod_containers:
          - name: rproxy
            image: quay.io/indeliblesoftware/caddy
            run_args: "\
              --read-only \
              --cap-drop all \
              --ulimit nofile=16384 \
              -v {{host_config_dir}}/rproxy/Caddyfile:/etc/Caddyfile:ro \
              -v {{host_data_dir}}/rproxy/certs:/etc/ssl/caddy \
              -v {{host_data_dir}}/rproxy/logs:/var/log/caddy"
            cmd_args: -agree
          - name: nextcloud-mariadb
            image: docker.io/mariadb
            run_args: "\
              --cap-drop all \
              -v {{host_data_dir}}/nextcloud-mariadb:/var/lib/mysql"
            cmd_args: "--transaction-isolation=READ-COMMITTED"
          - name: nextcloud-redis
            image: docker.io/redis:alpine
            run_args: "\
              --read-only \
              --cap-drop all \
              -v {{host_data_dir}}/nextcloud-redis:/data"
          - name: nextcloud
            image: docker.io/nextcloud:19
            default_user: true
            run_args: "\
              -e APACHE_DISABLE_REWRITE_IP=1 \
              -v {{host_config_dir}}/nextcloud:/var/www/html \
              -v {{host_data_dir}}/nextcloud:/var/www/html/data \
              -v /nas/documents:/nas/documents \
              -v /nas/media:/nas/media"
          - name: nextcloud-cron
            image: docker.io/nextcloud:19
            default_user: true
            run_args: "\
              -v {{host_config_dir}}/nextcloud:/var/www/html \
              -v {{host_data_dir}}/nextcloud:/var/www/html/data \
              -v /nas/documents:/nas/documents \
              -v /nas/media:/nas/media"
            cmd_args: "/cron.sh"
        host_mounts:
          - "{{host_config_dir}}/rproxy/Caddyfile"
          - "{{host_data_dir}}/rproxy/certs"
          - "{{host_data_dir}}/rproxy/logs"
          - "{{host_data_dir}}/nextcloud-mariadb"
          - "{{host_data_dir}}/nextcloud-redis"
        expose_ports:
          - 80/tcp
          - 443/tcp
